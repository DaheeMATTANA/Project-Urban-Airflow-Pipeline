name: Deploy dbt models

on:
  # Trigger when changes in dbt folder are merged into main
  pull_request:
    branches: ["main"]
    paths:
      - "analytics/dbt/**"
  
  release:
    types: [published]

  # Allow manual runs from GitHub Actions UI
  workflow_dispatch:

jobs:
  dbt-build:
    runs-on: self-hosted   # ✅ self-hosted runner required (has access to your infra)
    defaults:
      run:
        working-directory: analytics/dbt/urban_airflow_analytics

    env:
      DBT_PROFILES_DIR: ../
      MINIO_ENDPOINT: ${{ secrets.MINIO_ENDPOINT }}
      MINIO_ACCESS_KEY: ${{ secrets.MINIO_ACCESS_KEY }}
      MINIO_SECRET_KEY: ${{ secrets.MINIO_SECRET_KEY }}
      
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: pip install dbt-duckdb

      - name: Set DB target
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "Deploying to preprod..."
            echo "DBT_TARGET=preprod" >> $GITHUB_ENV
          elif [[ "${{ github.event_name }}" == "release" ]]; then
            echo "Deploying to prod..."
            echo "DBT_TARGET=prod" >> $GITHUB_ENV
          fi

      # ✅ Ensure dev snapshot exists before continuing
      - name: Check dev DuckDB snapshot exists
        run: |
          DEV_DB=../../../infra_platform/duckdb_data/warehouse_dev.duckdb
          if [ ! -f "$DEV_DB" ]; then
            echo "❌ warehouse_dev.duckdb is missing! Did ingestion run?"
            exit 1
          fi
          echo "✅ Found $DEV_DB"

      # ✅ Debug step: list schemas & tables in dev DB
      - name: Debug dev DuckDB contents
        run: |
          python - <<'PYCODE'
          import duckdb
          con = duckdb.connect("../../../infra_platform/duckdb_data/warehouse_dev.duckdb")
          print("✅ Schemas:")
          print(con.execute("PRAGMA show_schemas").fetchall())
          print("✅ Tables in raw schema:")
          print(con.execute("PRAGMA show_tables FROM raw").fetchall())
          con.close()
          PYCODE

      # ✅ Init only target DB (not dev)
      - name: Init target DuckDB (preprod/prod)
        run: |
          mkdir -p ../../../infra_platform/duckdb_data
          python - <<'PYCODE'
          import duckdb, os
          target = os.environ['DBT_TARGET']
          path = f"../../../infra_platform/duckdb_data/warehouse_{target}.duckdb"
          con = duckdb.connect(path)
          con.execute("create schema if not exists main;")
          con.close()
          print(f"✅ Initialized {path}")
          PYCODE

      - name: Run dbt build
        run: dbt build

      - name: Upload DuckDB artifact
        uses: actions/upload-artifact@v4
        with:
          name: warehouse_${{ env.DBT_TARGET }}
          path: infra_platform/duckdb_data/warehouse_${{ env.DBT_TARGET }}.duckdb
