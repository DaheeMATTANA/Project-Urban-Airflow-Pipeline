name: Deploy dbt models

on:
  # Trigger when changes in dbt folder are merged into main
  pull_request:
    branches: ["main"]
    paths:
      - "analytics/dbt/**"
  
  release:
    types: [published]

  # Allow manual runs from GitHub Actions UI
  workflow_dispatch:

jobs:
  dbt-build:
    runs-on: self-hosted
    defaults:
      run:
        working-directory: analytics/dbt/urban_airflow_analytics

    env:
      DBT_PROFILES_DIR: ../
      DBT_DEV_WAREHOUSE_PATH: ${{ github.workspace }}/infra_platform/duckdb_data/warehouse_dev.duckdb
      MINIO_ENDPOINT: "localhost:9000"
      MINIO_BUCKET: "snapshots"
      MINIO_KEY: "warehouse_dev.duckdb"
      MINIO_ACCESS_KEY: ${{ secrets.MINIO_ACCESS_KEY }}
      MINIO_SECRET_KEY: ${{ secrets.MINIO_SECRET_KEY }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: pip install dbt-duckdb minio

      - name: Install dbt dependencies
        run: dbt deps

      - name: Set DB target
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "Deploying to preprod..."
            echo "DBT_TARGET=preprod" >> $GITHUB_ENV
          elif [[ "${{ github.event_name }}" == "release" ]]; then
            echo "Deploying to prod..."
            echo "DBT_TARGET=prod" >> $GITHUB_ENV
          else
            echo "DBT_TARGET=dev" >> $GITHUB_ENV
          fi

      - name: Download dev DuckDB snapshot (for preprod/prod)
        if: env.DBT_TARGET != 'dev'
        run: |
          python - <<'PYCODE'
          import os
          from minio import Minio
          from pathlib import Path

          dev_path = Path("${{ github.workspace }}/infra_platform/duckdb_data/warehouse_dev.duckdb")
          dev_path.parent.mkdir(parents=True, exist_ok=True)

          client = Minio(
              os.environ["MINIO_ENDPOINT"],
              access_key=None,
              secret_key=None,
              secure=False
          )

          client.fget_object(
              os.environ["MINIO_BUCKET"],
              os.environ["MINIO_KEY"],
              str(dev_path)
          )
          print(f"[INFO] Downloaded dev DuckDB snapshot to {dev_path}")
          PYCODE

      - name: Init target DuckDB file
        run: |
          python - <<'PYCODE'
          import duckdb, os
          from pathlib import Path

          target = os.environ.get('DBT_TARGET')
          workspace = Path(os.environ['GITHUB_WORKSPACE'])
          if target in ("preprod", "prod"):
              path = workspace / f"infra_platform/duckdb_data/warehouse_{target}.duckdb"
              path.parent.mkdir(parents=True, exist_ok=True)
              con = duckdb.connect(str(path))
              con.execute("create schema if not exists main;")
              con.close()
              print(f"[INFO] Initialized {path}")
          else:
              print("[INFO] Skipping target init for dev")
          PYCODE


      - name: Run dbt build
        run: dbt build --target $DBT_TARGET

      - name: Upload DuckDB artifact
        if: env.DBT_TARGET != 'dev'
        uses: actions/upload-artifact@v4
        with:
          name: warehouse_${{ env.DBT_TARGET }}
          path: infra_platform/duckdb_data/warehouse_${{ env.DBT_TARGET }}.duckdb