services:
  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U airflow -d airflow"]
      interval: 5s
      timeout: 5s
      retries: 30
    volumes:
      - pg_data:/var/lib/postgresql/data

  airflow-webserver:
    build: { context: ., dockerfile: Dockerfile.airflow }
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__CORE__LOAD_EXAMPLES: 'False'
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__CORE__DAGS_FOLDER: /opt/airflow/dags
      AIRFLOW__WEBSERVER__WEB_SERVER_HOST: 0.0.0.0
      AIRFLOW__WEBSERVER__WEB_SERVER_PORT: '8080'
    volumes:
      - ../dags:/opt/airflow/dags
      - ../plugins:/opt/airflow/plugins
    ports:
      - "8081:8080"   # host 8081 â†’ container 8080
    depends_on:
      postgres: { condition: service_healthy }
    command: >
      bash -lc "
        until pg_isready -h postgres -U airflow -d airflow; do echo 'waiting for db'; sleep 2; done &&
        airflow db upgrade &&
        airflow users create
          --username admin --password admin
          --firstname a --lastname d
          --role Admin --email admin@local || true &&
        exec airflow webserver
      "

  airflow-scheduler:
    build: { context: ., dockerfile: Dockerfile.airflow }
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__CORE__DAGS_FOLDER: /opt/airflow/dags
    volumes:
      - ../dags:/opt/airflow/dags
      - ../plugins:/opt/airflow/plugins
    depends_on:
      airflow-webserver: { condition: service_started }
    command: bash -lc "exec airflow scheduler"

volumes:
  pg_data: {}